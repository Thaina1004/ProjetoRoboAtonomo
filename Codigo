
#include <ESP8266WiFi.h> // Importa a Biblioteca ESP8266WiFi
#include <PubSubClient.h> // Importa a Biblioteca PubSubClient
#include <Ultrasonic.h> // importa sensor

//defines de id mqtt e tópicos para publicação e subscribe
#define TOPICO_SUBSCRIBE "liga_desliga_motores"     //tópico MQTT de escuta
#define TOPICO_PUBLISH   "estado_motores"    //tópico MQTT de envio de informações para Broker
#define ID_MQTT  "RoboIot01"     //id mqtt (para identificação de sessão)


//defines - mapeamento de pinos do NodeMCU
#define D0    16
#define D1    5
#define D2    4
#define D3    0
#define D4    2
#define D5    14
#define D6    12
#define D7    13
#define D8    15
#define D9    3
#define D10   1

//defines - motores
#define MOTOR_RIGHT     D0
#define MOTOR_LEFT   D1

#define TRIGGER_PIN D2              //Pino de saída 4 do arduino: Trigger do sensor ultrassônico
#define ECHO_PIN    D3           //Pino de entrada 5 do arduino: Echo do sensor ultrassônico

Ultrasonic ultrasonic(TRIGGER_PIN, ECHO_PIN);   //Objetos da biblioteca do sensor


// WIFI
const char* Name = " ";     //Coloque aqui o Name / nome da rede WI-FI que deseja se conectar
const char* PASSWORD = " "; //Coloque aqui a senha da rede WI-FI que deseja se conectar

// MQTT
const char* BROKER_MQTT = "broker.mqtt-dashboard.com"; //URL do broker MQTT que se deseja utilizar
int BROKER_PORT = 1883; // Porta do Broker MQTT

//Variáveis e objetos globais
WiFiClient espClient; // Cria o objeto espClient
PubSubClient MQTT(espClient); // Instancia o Cliente MQTT passando o objeto espClient
char StateMotorRight = '0';  //variável que armazena o estado atual do motor da direita
char StateMotorLeft = '0';  //variável que armazena o estado atual do motor da esquerda
bool roboligado = false;

//Prototypes
void initSerial();
void initWiFi();
void initMQTT();
void reconectWiFi();
void mqtt_callback(char* topic, byte* payload, unsigned int length);
void VerificaConexoesWiFIEMQTT(void);
void InitOutputs(void);


void setup()
{
  //inicializações:
  InitOutputs();
  initSerial();
  initWiFi();
  initMQTT();
}

void initSerial() {
  Serial.begin(115200);
}

//Função: inicializa e conecta-se na rede WI-FI desejada
void initWiFi()
{
  delay(10);
  Serial.println("------Conexao WI-FI -----");
  Serial.print("Conectando-se na rede: ");
  Serial.println(Name);
  Serial.println("Aguarde");

  reconectWiFi();
}

//Função: inicializa parâmetros de conexão MQTT(endereço do broker, porta e seta função de callback)
void initMQTT()
{
  MQTT.setServer(BROKER_MQTT, BROKER_PORT);   //informa qual broker e porta deve ser conectado
  MQTT.setCallback(mqtt_callback);            //atribui função de callback (função chamada quando qualquer informação de um dos tópicos subescritos chega)
}

//Função: função de callback
// esta função é chamada toda vez que uma informação de um dos tópicos subescritos chega)
void mqtt_callback(char* topic, byte* payload, unsigned int length)
{
  String msg;

  //obtem a string do payload recebido
  for (int i = 0; i < length; i++)
  {
    char c = (char)payload[i];
    msg += c;
  }

  //toma ação dependendo da string recebida:
  //-----------------------------------------------------
  //     Mensagem recebida       |       Ação tomada
  //-----------------------------------------------------
  //             1               | O robô liga
  //             0               | O robô para imediatamente

  if (msg.equals("0"))
  {
    //para parar, os dois motores são desligados
    digitalWrite(MOTOR_RIGHT, LOW);
    digitalWrite(MOTOR_LEFT, LOW);

    StateMotorRight = '0';
    StateMotorLeft = '0';
    roboligado = false;
  }

  if (msg.equals("1"))
  {
    //para andaf, os dois motores são ligados
    digitalWrite(MOTOR_RIGHT, HIGH);
    digitalWrite(MOTOR_LEFT, HIGH);

    StateMotorRight = '1';
    StateMotorLeft = '1';
    roboligado = true;

  }
}

//Função: reconecta-se ao broker MQTT (caso ainda não esteja conectado ou em caso de a conexão cair)
// em caso de sucesso na conexão ou reconexão, o subscribe dos tópicos é refeito.
void reconnectMQTT()
{
  while (!MQTT.connected())
  {
    Serial.print("* Tentando se conectar ao Broker MQTT: ");
    Serial.println(BROKER_MQTT);
    if (MQTT.connect(ID_MQTT)) {
      Serial.println("Conectado com sucesso ao broker MQTT!");
      MQTT.subscribe(TOPICO_SUBSCRIBE);
    }
    else {
      Serial.println("Falha ao reconectar no broker.");
      Serial.println("Havera nova tentatica de conexao em 2s");
      delay(2000);
    }
  }
}

//Função: reconecta-se ao WiFi
void reconectWiFi()
{
  //se já está conectado a rede WI-FI, nada é feito.
  //Caso contrário, são efetuadas tentativas de conexão
  if (WiFi.status() == WL_CONNECTED)
    return;

  WiFi.begin(Name, PASSWORD); // Conecta na rede WI-FI

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(100);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("Conectado com sucesso na rede ");
  Serial.print(Name);
  Serial.println("IP obtido: ");
  Serial.println(WiFi.localIP());
}

//Função: verifica o estado das conexões WiFI e ao broker MQTT.
//        Em caso de desconexão (qualquer uma das duas), a conexão é refeita.
void VerificaConexoesWiFIEMQTT(void)
{
  if (!MQTT.connected())
    reconnectMQTT(); //se não há conexão com o Broker, a conexão é refeita
  reconectWiFi(); //se não há conexão com o WiFI, a conexão é refeita
}

//Função: envia ao Broker o estado atual do output
void EnviaEstadoOutputMQTT(void)
{
  char EstadosMotores[3];

  EstadosMotores[0] = StateMotorRight;
  EstadosMotores[1] = '-';
  EstadosMotores[2] = StateMotorLeft;

  MQTT.publish(TOPICO_PUBLISH, EstadosMotores);
  //  Serial.println("- Estados dos motores enviados com sucesso");


  if (roboligado == true) {

    Serial.println(EstadosMotores[0]);
    Serial.println(EstadosMotores[2]);
    Serial.println("roboligado");
    Serial.println(roboligado);
    verifica_distancia();
  }
  delay(1000);
}

//Função: inicializa os outputs em nível lógico baixo (desliga os dois motores)
void InitOutputs(void)
{
  pinMode(MOTOR_RIGHT, OUTPUT);
  pinMode(MOTOR_LEFT, OUTPUT);

  digitalWrite(MOTOR_RIGHT, LOW);
  digitalWrite(MOTOR_LEFT, LOW);
}

void verifica_distancia() {
  float dist_cm = distancia();


  if (dist_cm < 50)               //distância menor que 20cm?
  {
    Serial.println(dist_cm );

    decisao();
  } //end if
  delay(100);
}



void robo_frente()                  //função para mover o robô para frente
{
  digitalWrite(MOTOR_RIGHT, HIGH);
  digitalWrite(MOTOR_LEFT, HIGH);

  StateMotorRight = '1';
  StateMotorLeft = '1';
}

void robo_direita()                  //função para mover o robô para direita
{
  digitalWrite(MOTOR_RIGHT, LOW);
  digitalWrite(MOTOR_LEFT, HIGH);

  StateMotorRight = '0';
  StateMotorLeft = '1';

}


void robo_esquerda()                  //função para mover o robô para esquerda
{
  digitalWrite(MOTOR_RIGHT, HIGH);
  digitalWrite(MOTOR_LEFT, LOW);

  StateMotorRight = '1';
  StateMotorLeft = '0';

}

void robo_parado() {
  digitalWrite(MOTOR_RIGHT, LOW);
  digitalWrite(MOTOR_LEFT, LOW);

  StateMotorRight = '0';
  StateMotorLeft = '0';
}


void decisao()                      //função para decidir a ação do robô
{
  robo_parado();
  delay(400);
  robo_esquerda() ;
  delay(1000); //esse tempo precisa ser avaliado para que o robô vire por volta de 90 graus
  robo_parado();
  delay(400);
  robo_frente() ;
  delay(400);
} //end função

float distancia()                   //função que mede a distância em cm
{
  float cmMsec;        //declara a variável tipo float cmMsec

  //Associa à variável tipo long microsec o tempo em microsegundos
  long microsec = ultrasonic.timing();
  //função da biblioteca para converter a distância em cm e associá-la a cmMsec
  cmMsec = ultrasonic.convert(microsec, Ultrasonic::CM);
  return (cmMsec);                      // retorna o valor em cm para a função

}

//programa principal
void loop()
{
  //garante funcionamento das conexões WiFi e ao broker MQTT
  VerificaConexoesWiFIEMQTT();

  //envia o status de todos os outputs para o Broker no protocolo esperado
  EnviaEstadoOutputMQTT();

  //keep-alive da comunicação com broker MQTT
  MQTT.loop();


} //end loop
